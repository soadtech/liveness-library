/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "./stencil-public-runtime";
import { Device } from "./IDevice";
export namespace Components {
    interface CameraComp {
        "device": Device;
        "faceDetection": boolean;
        "modelPath": string;
        "probabilityThreshold": number;
        "showMask": boolean;
    }
    interface CameraComponent {
        "background_color": string;
        "debug": string;
        "disable_control_panel": string;
        "face_detection": string;
        "logo_style": string;
        "model_path": string;
        "probability_threshold": string;
        "show_mask": string;
        "stop_after_capturing": string;
        "url_logo": string;
    }
    interface ControlPanel {
        "cameraStatus": number;
        "disableControlPanel": boolean;
        "faceDetection": boolean;
        "mobile": boolean;
        "mobileMakePhoto": boolean;
        "resolutionOnPhoto": boolean;
    }
}
declare global {
    interface HTMLCameraCompElement extends Components.CameraComp, HTMLStencilElement {
    }
    var HTMLCameraCompElement: {
        prototype: HTMLCameraCompElement;
        new (): HTMLCameraCompElement;
    };
    interface HTMLCameraComponentElement extends Components.CameraComponent, HTMLStencilElement {
    }
    var HTMLCameraComponentElement: {
        prototype: HTMLCameraComponentElement;
        new (): HTMLCameraComponentElement;
    };
    interface HTMLControlPanelElement extends Components.ControlPanel, HTMLStencilElement {
    }
    var HTMLControlPanelElement: {
        prototype: HTMLControlPanelElement;
        new (): HTMLControlPanelElement;
    };
    interface HTMLElementTagNameMap {
        "camera-comp": HTMLCameraCompElement;
        "camera-component": HTMLCameraComponentElement;
        "control-panel": HTMLControlPanelElement;
    }
}
declare namespace LocalJSX {
    interface CameraComp {
        "device"?: Device;
        "faceDetection"?: boolean;
        "modelPath"?: string;
        "onCloseCamera"?: (event: CustomEvent<any>) => void;
        "onErrorCamera"?: (event: CustomEvent<any>) => void;
        "onMakePhoto"?: (event: CustomEvent<any>) => void;
        "onTakePhoto"?: (event: CustomEvent<any>) => void;
        "onVideoStarted"?: (event: CustomEvent<any>) => void;
        "probabilityThreshold"?: number;
        "showMask"?: boolean;
    }
    interface CameraComponent {
        "background_color"?: string;
        "debug"?: string;
        "disable_control_panel"?: string;
        "face_detection"?: string;
        "logo_style"?: string;
        "model_path"?: string;
        "probability_threshold"?: string;
        "show_mask"?: string;
        "stop_after_capturing"?: string;
        "url_logo"?: string;
    }
    interface ControlPanel {
        "cameraStatus"?: number;
        "disableControlPanel"?: boolean;
        "faceDetection"?: boolean;
        "mobile"?: boolean;
        "mobileMakePhoto"?: boolean;
        "onCloseCamera"?: (event: CustomEvent<any>) => void;
        "onMakePhoto"?: (event: CustomEvent<any>) => void;
        "onOpenCamera"?: (event: CustomEvent<any>) => void;
        "onRetakePhoto"?: (event: CustomEvent<any>) => void;
        "onTakePhoto"?: (event: CustomEvent<any>) => void;
        "resolutionOnPhoto"?: boolean;
    }
    interface IntrinsicElements {
        "camera-comp": CameraComp;
        "camera-component": CameraComponent;
        "control-panel": ControlPanel;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "camera-comp": LocalJSX.CameraComp & JSXBase.HTMLAttributes<HTMLCameraCompElement>;
            "camera-component": LocalJSX.CameraComponent & JSXBase.HTMLAttributes<HTMLCameraComponentElement>;
            "control-panel": LocalJSX.ControlPanel & JSXBase.HTMLAttributes<HTMLControlPanelElement>;
        }
    }
}
