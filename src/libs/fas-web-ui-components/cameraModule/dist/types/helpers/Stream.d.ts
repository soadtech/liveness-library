import { PipelineResult } from "../libs/FaceDetector/PipelineResult";
import { Device } from "../IDevice";
export declare class Stream {
  static instance: Stream;
  private videoElement;
  private canvasElement;
  private stream;
  private faceDetection;
  private showMask;
  private device;
  private videoSize;
  private readonly detector;
  private callbackErrors;
  private callbackAutoCapturing;
  private callbackFaceDetectionErrors;
  private streamPaused;
  setShowMask(val: boolean): void;
  setFaceDetection(val: boolean): void;
  setProbabilityThreshold(val: number): void;
  setCallbackErrors(fun: (error: Error, isError: boolean) => void): void;
  setCallbackAutoCapturing(fun: () => void): void;
  setCallbackFaceDetectionErrors(fun: (e: PipelineResult) => void): void;
  private constructor();
  static getInstance(device?: Device, modelPath?: string): Stream;
  returnErrors(errors: PipelineResult): void;
  autoCapturing(): void;
  updateHtmlElements(videoElement: HTMLVideoElement, canvasElement: HTMLCanvasElement): void;
  startDetection(): Promise<void>;
  static orientationChange(): void;
  startStream(stream: MediaStream): void;
  initStream(stream: MediaStream): Promise<void>;
  pauseStream: () => void;
  resumeStream(): Promise<void>;
  private updateCanvasSize;
  dropStream(): void;
  private streamStopped;
  private drawMask;
  private dropMask;
  takePhoto(): Promise<unknown>;
  getFrame(canvas: HTMLCanvasElement): Promise<Blob>;
}
